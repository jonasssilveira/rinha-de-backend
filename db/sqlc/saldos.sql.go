// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: saldos.sql

package db

import (
	"context"
	"database/sql"
)

const createSaldo = `-- name: CreateSaldo :exec
INSERT INTO saldos (cliente_id,
                      valor)
VALUES ($1, $2)
`

type CreateSaldoParams struct {
	ClienteID int32 `json:"cliente_id"`
	Valor     int64 `json:"valor"`
}

func (q *Queries) CreateSaldo(ctx context.Context, arg CreateSaldoParams) error {
	_, err := q.db.ExecContext(ctx, createSaldo, arg.ClienteID, arg.Valor)
	return err
}

const deposit = `-- name: Deposit :exec
UPDATE saldos
SET valor = valor + $1
WHERE cliente_id = $2
`

type DepositParams struct {
	Valor     int64 `json:"valor"`
	ClienteID int32 `json:"cliente_id"`
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) error {
	_, err := q.db.ExecContext(ctx, deposit, arg.Valor, arg.ClienteID)
	return err
}

const getSaldoCliente = `-- name: GetSaldoCliente :one
SELECT c.limite, s.valor
FROM saldos s
LEFT JOIN clientes c on c.id = s.cliente_id
WHERE c.id = $1 LIMIT 1
`

type GetSaldoClienteRow struct {
	Limite sql.NullInt64 `json:"limite"`
	Valor  int64         `json:"valor"`
}

func (q *Queries) GetSaldoCliente(ctx context.Context, id int32) (GetSaldoClienteRow, error) {
	row := q.db.QueryRowContext(ctx, getSaldoCliente, id)
	var i GetSaldoClienteRow
	err := row.Scan(&i.Limite, &i.Valor)
	return i, err
}

const withdraw = `-- name: Withdraw :exec
UPDATE saldos
SET valor = valor - $1
WHERE cliente_id = $2
`

type WithdrawParams struct {
	Valor     int64 `json:"valor"`
	ClienteID int32 `json:"cliente_id"`
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) error {
	_, err := q.db.ExecContext(ctx, withdraw, arg.Valor, arg.ClienteID)
	return err
}
