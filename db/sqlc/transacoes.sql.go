// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transacoes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateTransacoes = `-- name: CreateTransacoes :exec
INSERT INTO transacoes (cliente_id,
                      valor,
                      tipo,
                      descricao)
VALUES ($1, $2, $3, $4)
`

type CreateTransacoesParams struct {
	ClienteID int32  `json:"cliente_id"`
	Valor     int64  `json:"valor"`
	Tipo      string `json:"tipo"`
	Descricao string `json:"descricao"`
}

func (q *Queries) CreateTransacoes(ctx context.Context, arg CreateTransacoesParams) error {
	_, err := q.db.Exec(ctx, CreateTransacoes,
		arg.ClienteID,
		arg.Valor,
		arg.Tipo,
		arg.Descricao,
	)
	return err
}

const GetClienteTrasacoes = `-- name: GetClienteTrasacoes :many
SELECT t.valor, t.tipo, t.descricao, t.realizada_em
FROM transacoes t
LEFT JOIN clientes c on c.id = t.cliente_id
WHERE c.id = $1 order by t.realizada_em desc LIMIT 10
`

type GetClienteTrasacoesRow struct {
	Valor       int64            `json:"valor"`
	Tipo        string           `json:"tipo"`
	Descricao   string           `json:"descricao"`
	RealizadaEm pgtype.Timestamp `json:"realizada_em"`
}

func (q *Queries) GetClienteTrasacoes(ctx context.Context, id int32) ([]GetClienteTrasacoesRow, error) {
	rows, err := q.db.Query(ctx, GetClienteTrasacoes, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClienteTrasacoesRow
	for rows.Next() {
		var i GetClienteTrasacoesRow
		if err := rows.Scan(
			&i.Valor,
			&i.Tipo,
			&i.Descricao,
			&i.RealizadaEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
