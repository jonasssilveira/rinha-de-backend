// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: clientes.sql

package db

import (
	"context"
)

const CreateCliente = `-- name: CreateCliente :one
INSERT INTO clientes (nome,
                 limite)
VALUES ($1, $2)RETURNING nome, limite
`

type CreateClienteParams struct {
	Nome   string `json:"nome"`
	Limite int64  `json:"limite"`
}

type CreateClienteRow struct {
	Nome   string `json:"nome"`
	Limite int64  `json:"limite"`
}

func (q *Queries) CreateCliente(ctx context.Context, arg CreateClienteParams) (CreateClienteRow, error) {
	row := q.db.QueryRow(ctx, CreateCliente, arg.Nome, arg.Limite)
	var i CreateClienteRow
	err := row.Scan(&i.Nome, &i.Limite)
	return i, err
}

const DeleteCliente = `-- name: DeleteCliente :exec
DELETE
FROM clientes
WHERE id = $1
`

func (q *Queries) DeleteCliente(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteCliente, id)
	return err
}

const GetCliente = `-- name: GetCliente :one
SELECT limite, nome
FROM clientes
WHERE id = $1 LIMIT 1
`

type GetClienteRow struct {
	Limite int64  `json:"limite"`
	Nome   string `json:"nome"`
}

func (q *Queries) GetCliente(ctx context.Context, id int32) (GetClienteRow, error) {
	row := q.db.QueryRow(ctx, GetCliente, id)
	var i GetClienteRow
	err := row.Scan(&i.Limite, &i.Nome)
	return i, err
}
